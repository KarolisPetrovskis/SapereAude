openapi: 3.0.4
info:
  title: Commerce Backend API (diagram-derived, updated)
  description: API contract derived from the provided class diagram. Includes Product/ProductGroup/ProductVariation/ProductPrice, Orders, Reservations, Discounts, TaxRates, Businesses and Users.
  version: 1.0.1
servers:
  - url: https://api.example.com/v1
tags:
  - name: Product
    description: Product, ProductPrice, ProductVariation, ProductGroup operations
  - name: Order
    description: Orders, order items and payments
  - name: Business
    description: Business and User operations
  - name: Reservation
    description: Reservation operations
  - name: Discount
    description: Discount operations
  - name: Tax
    description: Tax rate operations

paths:
  /products:
    get:
      tags: [Product]
      summary: List products
      parameters:
        - name: businessId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags: [Product]
      summary: Create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '422':
          description: Validation error

  /products/{productId}:
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags: [Product]
      summary: Get product by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      tags: [Product]
      summary: Update existing product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    delete:
      tags: [Product]
      summary: Delete product
      responses:
        '204':
          description: Deleted
        '404':
          description: Product not found




  /products/{productId}/prices:
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Product]
      summary: Get full price history for a product
      description: |
        Returns the full list of price records for a product, 
        including all past, current, and future price changes.
        Each record contains an effective date range.      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPrice'
        '404':
          description: Product not found
    post:
      tags: [Product]
      summary: Create a product price
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPriceCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'
        '400':
          description: Invalid input
        '404':
          description: Product not found

  /productVariations:
    get:
      tags: [Product]
      summary: List product variations
      parameters:
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariation'
    post:
      tags: [Product]
      summary: Create product variation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariationCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariation'

  /productVariations/{variationId}:
    parameters:
      - name: variationId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Product]
      summary: Get product variation by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariation'
        '404':
          description: Not found
    put:
      tags: [Product]
      summary: Update product variation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariationCreate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariation'

  /orders:
    get:
      tags: [Order]
      summary: List orders
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/OrderStatus'
        - name: businessId
          in: query
          schema:
            type: string
            format: uuid
        - name: UserId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      tags: [Order]
      summary: Create order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input

  /orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Order]
      summary: Get order by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not found
    put:
      tags: [Order]
      summary: Update an existing order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    delete:
      tags: [Order]
      summary: Delete order
      responses:
        '204':
          description: Deleted
        '404':
          description: Not found

  /orders/{orderId}/items:
    parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Order]
      summary: List items for an order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
    post:
      tags: [Order]
      summary: Add an OrderItem to an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid input
        '404':
          description: Order or Product not found

  /order-payments:
    post:
      tags: [Order]
      summary: Create a payment for an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderPaymentCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPayment'
        '400':
          description: Invalid input

  /businesses:
    get:
      tags: [Business]
      summary: List businesses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'
    post:
      tags: [Business]
      summary: Create business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'

  /businesses/{businessId}/Users:
    parameters:
      - name: businessId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Business]
      summary: List Users for a business
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags: [Business]
      summary: Create a User under a business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /reservations:
    get:
      tags: [Reservation]
      summary: List reservations
      parameters:
        - name: customerId
          in: query
          schema:
            type: string
            format: uuid
        - name: businessId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
    post:
      tags: [Reservation]
      summary: Create reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'

  /discounts:
    get:
      tags: [Discount]
      summary: List discounts
      parameters:
        - name: businessId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Discount'
    post:
      tags: [Discount]
      summary: Create discount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscountCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'

  /taxRates:
    get:
      tags: [Tax]
      summary: List tax rates
      parameters:
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: businessId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxRate'
    post:
      tags: [Tax]
      summary: Create tax rate (business-scoped)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRateCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'

  /orders/info/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Order]
      summary: Get full order details by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderFullDetail'
        '404':
          description: Order not found

  /reservations/all:
    get:
      tags: [Reservation]
      summary: List all reservations in system
      parameters:
        - name: businessId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the business to retrieve reservations for
        - name: customerId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Optional filter to show only reservations by a specific customer
      responses:
        '200':
          description: List of reservations for the given business
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationDetail'
        '404':
          description: No reservations found for the specified business

  /reservations/by-period:
    get:
      tags: [Reservation]
      summary: Get reservations for a business within a specified time period
      parameters:
        - name: businessId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Business ID to retrieve reservations for
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: Start date-time (inclusive)
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: End date-time (inclusive)
      responses:
        '200':
          description: List of reservations within the given period
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid or missing date range
        '404':
          description: No reservations found for the given business and period

  /products/{productId}/price-history:
    get:
      tags: [ProductPrice]
      summary: Get all price changes for a product
      description: |
        Returns the full price history for a product, including all effective date ranges.
        Useful for displaying historical pricing trends or auditing.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the product to retrieve price changes for
      responses:
        '200':
          description: List of all product price records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPrice'
        '404':
          description: Product not found or no price history available

  /businesses/{businessId}/Users/{UserId}/salary:
    put:
      tags: [User]
      summary: Update User salary
      description: >
        Updates the salary of a specific User under the given business.
        Only authorized users (e.g., business managers) should be able to perform this operation.
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the business the User belongs to
        - name: UserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the User whose salary will be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newSalary:
                  type: number
                  format: decimal
                  description: New salary amount
              required: [newSalary]
      responses:
        '200':
          description: Salary updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid salary input
        '404':
          description: Business or User not found

  /products/{productId}/tax:
    get:
      tags: [TaxRate]
      summary: Get tax rate for a specific product
      description: |
        Returns the applicable tax rate for a product. 
        The tax rate may be determined by the product's assigned tax type, 
        product group, or business tax configuration.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the product to retrieve tax information for
      responses:
        '200':
          description: Tax rate found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'
        '404':
          description: Product or tax rate not found

  /Users/{UserId}/orders:
    get:
      tags: [Order]
      summary: Get all orders created or handled by a specific User
      description: |
        Retrieves a list of all orders associated with a given User.
        Useful for tracking User performance, activity, or daily workload.
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the User whose orders to retrieve
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/OrderStatus'
          description: Filter by order status (e.g., Pending, Completed)
        - name: fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Optional start date to filter orders
        - name: toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Optional end date to filter orders
      responses:
        '200':
          description: List of orders handled by the User
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: User not found or no orders available

  /Users/{UserId}/permission:
    put:
      tags: [User]
      summary: Update a User's permission level
      description: |
        Updates the access or permission level of a specific User.
        This can be used by business administrators to promote or restrict User privileges.
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the User whose permission level will be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionLevel:
                  type: string
                  enum: [Owner, Manager, Employee, Trainee]
                  description: The new permission level to assign
              required: [permissionLevel]
      responses:
        '200':
          description: Permission level updated successfully
        '400':
          description: Invalid permission level
        '404':
          description: User not found

  /Users/{UserId}/password:
    put:
      tags: [User]
      summary: Change a User's password
      description: |
        Allows a User or administrator to change the User's account password.
        If performed by the User themselves, oldPassword is required.
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the User whose password is being changed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: The current password (required if self-service)
                newPassword:
                  type: string
                  minLength: 8
                  description: The new password
              required: [newPassword]
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid request or password format
        '404':
          description: User not found
        '401':
          description: Incorrect old password

  /Users/{UserId}/reservations/current:
    get:
      tags: [Reservation]
      summary: Get current and upcoming reservations for a User
      description: |
        Retrieves all reservations assigned to a specific User that are currently active
        or scheduled for the future. Useful for daily or weekly scheduling.
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the User whose reservations to retrieve
        - name: fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Optional start of the period (defaults to now)
        - name: toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Optional end of the period
      responses:
        '200':
          description: List of current and upcoming reservations for the User
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '404':
          description: User not found or no reservations available

  /taxRates/{taxRateId}:
    put:
      tags: [TaxRate]
      summary: Update an existing tax rate
      description: |
        Updates the details of a tax rate, such as its percentage or description.
        Used by business administrators when tax regulations or pricing rules change.
      parameters:
        - name: taxRateId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the tax rate to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the tax rate
                percentage:
                  type: number
                  format: decimal
                  description: The new percentage rate
                description:
                  type: string
                  nullable: true
                businessId:
                  type: string
                  format: uuid
              required: [percentage]
      responses:
        '200':
          description: Tax rate updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'
        '400':
          description: Invalid request body
        '404':
          description: Tax rate not found

  /productVariationGroups:
    post:
      tags: [ProductVariationGroup]
      summary: Create a new product variation group
      description: Creates a group to organize related product variations.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                businessId:
                  type: string
                  format: uuid
              required: [name, businessId]
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationGroup'
        '400':
          description: Invalid input

  /productVariationGroups/{groupId}/variations:
    post:
      tags: [ProductVariationGroup]
      summary: Add a product variation to a group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variationId:
                  type: string
                  format: uuid
                additionalCost:
                  type: number
                  format: decimal
                  nullable: true
              required: [variationId]
      responses:
        '200':
          description: Variation added successfully
        '404':
          description: Group or variation not found

  /productVariationGroups/{groupId}/variations/{variationId}:
    delete:
      tags: [ProductVariationGroup]
      summary: Remove a product variation from a group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: variationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Variation removed successfully
        '404':
          description: Group or variation not found

  /users/{userId}/password:
    put:
      tags: [User]
      summary: Change a user's password and mark first login as completed
      description: |
        Allows a user or administrator to update the password. 
        When successful, `firstLogin` is automatically set to `false`.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: The user's current password (required if self-service)
                newPassword:
                  type: string
                  minLength: 8
                  description: The new password
              required: [newPassword]
      responses:
        '200':
          description: Password updated successfully; firstLogin set to false
        '400':
          description: Invalid password format
        '401':
          description: Incorrect old password
        '404':
          description: User not found

  /businesses/{businessId}/places:
    get:
      tags: [Place]
      summary: List all places for a specific business
      description: |
        Retrieves all places (e.g., tables, rooms, or sections)
        that belong to the specified business (restaurant).
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the business whose places to list
      responses:
        '200':
          description: List of places for the business
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        '404':
          description: Business not found

    post:
      tags: [Place]
      summary: Create a new place for a specific business
      description: |
        Creates a new place (such as a table or room)
        under the specified business (restaurant).
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The business ID this place will belong to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceCreate'
      responses:
        '201':
          description: Place created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '400':
          description: Invalid input
        '404':
          description: Business not found

  /businesses/{businessId}/places/{placeId}:
    parameters:
      - name: businessId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: placeId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags: [Place]
      summary: Get details of a place in a specific business
      responses:
        '200':
          description: Place found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '404':
          description: Place not found

    put:
      tags: [Place]
      summary: Update a place in a business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceUpdate'
      responses:
        '200':
          description: Place updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '400':
          description: Invalid input
        '404':
          description: Place not found

    delete:
      tags: [Place]
      summary: Delete a place from a business
      responses:
        '204':
          description: Place deleted successfully
        '404':
          description: Place not found

  /places/{placeId}/reservations:
    get:
      tags: [Reservation]
      summary: Get all reservations for a specific place
      description: Retrieves all reservations associated with the given place.
      parameters:
        - name: placeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of reservations for the place
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '404':
          description: Place not found


  /statistics/{businessId}/overview:
    get:
      tags: [Statistics]
      summary: Get overall business statistics
      description: |
        Returns aggregated statistics including total revenue, total reservations,
        total discounts applied, and worker performance summaries.
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Aggregated business statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsOverview'
        '404':
          description: Business not found

  /statistics/{businessId}/history:
    get:
      tags: [Statistics]
      summary: Get detailed order and reservation history
      description: |
        Returns detailed historical data of orders and reservations for the business,
        including revenue trends and busiest periods.
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fromDate
          in: query
          schema:
            type: string
            format: date-time
        - name: toDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Historical data returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticsRecord'
        '404':
          description: No data found

  /products/{productId}/price/current:
    get:
      tags: [ProductPrice]
      summary: Get current price for a product
      description: |
        Returns the currently active price record for the specified product.
        The active price is determined where the current date falls within
        the price's effective date range.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Current price record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'
        '404':
          description: Product not found or no active price available

  /businesses/{businessId}/statistics:
    get:
      tags: [StatisticsAndHistory]
      summary: Get current business statistics
      description: |
        Returns aggregated business statistics including current revenue, 
        active reservations, top products, and worker performance.
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Current business statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsAndHistory'
        '404':
          description: Business not found

  /businesses/{businessId}/statistics/history:
    get:
      tags: [StatisticsAndHistory]
      summary: Get historical performance data for a business
      description: |
        Returns a list of historical statistical records for the business, 
        including daily or monthly revenue, orders, and reservations.
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fromDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: toDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Historical statistics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticsAndHistory'
        '404':
          description: Business not found or no data available

  /workers/{workerId}/statistics:
    get:
      tags: [StatisticsAndHistory]
      summary: Get performance statistics for a specific worker
      description: |
        Returns aggregated performance data for the specified worker, 
        including total handled orders, total revenue, and customer satisfaction metrics.
      parameters:
        - name: workerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Worker performance statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsAndHistory'
        '404':
          description: Worker not found or no data available



components:
  responses:
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    # Product & related
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        businessId:
          type: string
          format: uuid
        name:
          type: string
        productPriceId:
          type: string
          format: uuid
        maxServiceDuration:
          type: number
          format: float
          nullable: true
        productVariationGroup:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        productStatus:
          $ref: '#/components/schemas/ProductStatus'
        tax:
          type: string
          format: uuid
      required: [id, businessId, productPriceId, name, tax, productStatus]

    ProductCreate:
      type: object
      properties:
        businessId:
          type: string
          format: uuid
        name:
          type: string
        productPriceId:
          type: string
          format: uuid
        productVariationGroup:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        maxServiceDuration:
          type: number
        productStatus:
          $ref: '#/components/schemas/ProductStatus'
        tax:
          type: string
          format: uuid
      required: [businessId, name, productPriceId, productStatus, tax]

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        productPriceId:
          type: string
          format: uuid
        maxServiceDuration:
          type: number
        productVariationGroup:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        productStatus:
          $ref: '#/components/schemas/ProductStatus'

    ProductPrice:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        effectiveFrom:
          type: string
          format: date-time
          description: epoch
        effectiveTo:
          type: string
          format: date-time
          nullable: true
          description: epoch or null
        basePrice:
          type: number
          format: decimal
      required: [id, productId, basePrice, effectiveFrom]

    ProductPriceCreate:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          description: The ID of the product this price applies to
        effectiveFrom:
          type: string
          format: date-time
          description: epoch
        effectiveTo:
          type: string
          format: date-time
          nullable: true
          description: epoch
        basePrice:
          type: number
          format: decimal
      required: [productId, basePrice, effectiveFrom]

    ProductVariationGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productVariationId:
          type: array
          items:
            type: string
            format: uuid
        group:
          type: string
      required: [id, productVariationId, group]

    ProductVariation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        option:
          type: string
        priceModifier:
          type: number
          format: decimal
      required: [id, priceModifier, option]

    ProductVariationCreate:
      type: object
      properties:
        option:
          type: string
        priceModifier:
          type: number
      required: [priceModifier, option]

    # Orders & items & payments
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        UserId:
          type: string
          format: uuid
        orderItemId:
          type: array
          items:
            type: string
            format: uuid
        businessId:
          type: string
          format: uuid
        discountId:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        price:
          type: number
          format: decimal
        dateTime:
          type: string
          format: date-time
          description: epoch
        status:
          $ref: '#/components/schemas/OrderStatus'
        specialRequest:
          type: string
          nullable: true
      required: [id, UserId, businessId, dateTime, status, orderItemId, price]

    OrderCreate:
      type: object
      properties:
        UserId:
          type: string
          format: uuid
        businessId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
          description: epoch
        status:
          $ref: '#/components/schemas/OrderStatus'
        specialRequest:
          type: string
          nullable: true
        price:
          type: number
          format: decimal
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
      required: [UserId, businessId, dateTime, items, price]

    OrderUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'
        specialRequest:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
        price:
          type: number
          format: decimal

    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        discountId:
          type: string
          format: uuid
          nullable: true
        amount:
          type: integer
        price:
          type: number
          format: decimal
        isAltered:
          type: array
          items:
            type: boolean
        productVariationGroup:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
      required: [id, orderId, productId, amount, price, isAltered]

    OrderItemCreate:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        amount:
          type: integer
        discountId:
          type: string
          format: uuid
          nullable: true
        isAltered:
          type: array
          items:
            type: boolean
        productVariationGroup:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
      required: [orderId, productId, amount, isAltered]

    OrderPayment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        products:
          type: array
          items:
            type: string
            format: uuid
        paymentSum:
          type: number
          format: decimal
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        dateTime:
          type: string
          format: date-time
          description: epoch
        tip:
          type: number
          format: decimal
          nullable: true
      required: [id, orderId, paymentSum, paymentType, dateTime, products]

    OrderPaymentCreate:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        products:
          type: array
          items:
            type: string
            format: uuid
        paymentSum:
          type: number
          format: decimal
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        tip:
          type: number
          format: decimal
          nullable: true
      required: [orderId, paymentSum, paymentType, products]

    Business:
      type: object
      properties:
        id:
          type: string
          format: uuid
        statistics:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        name:
          type: string
        country:
          type: string
        address:
          type: string
        owner:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
      required: [id, name, country, address, owner, email, phoneNumber]

    BusinessCreate:
      type: object
      properties:
        name:
          type: string
        country:
          type: string
        address:
          type: string
        owner:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
      required: [name, country, address, owner, email, phoneNumber]

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        businessId:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        salary:
          type: number
          format: decimal
          nullable: true
        employmentStatus:
          $ref: '#/components/schemas/UserStatus'
        permissionLevel:
          type: integer
        password:
          type: string
          format: password
          description: encrypted password
        firstLogin:
          type: boolean
      required:
        [
          id,
          name,
          surname,
          permissionLevel,
          businessId,
          employmentStatus,
          password,
          firstLogin,
        ]

    UserCreate:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        permissionLevel:
          type: integer
        salary:
          type: number
        password:
          type: string
          format: password
        businessId:
          type: string
          format: uuid
      required: [name, surname, businessId, permissionLevel, password, salary]

    # Reservations
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
          nullable: true
        businessId:
          type: string
          format: uuid
        productIds:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        placeIds:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        name:
          type: string
        phoneNumber:
          type: string
        numberOfPeople:
          type: integer
          nullable: true
        startTime:
          type: string
          format: date-time
          description: epoch
        endTime:
          type: string
          format: date-time
          description: epoch
        request:
          type: string
          nullable: true
      required: [id, userId, businessId, name, phoneNumber, startTime, endTime]

    ReservationCreate:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          nullable: true
        businessId:
          type: string
          format: uuid
        productIds:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        reservationPlace:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        name:
          type: string
        phoneNumber:
          type: string
        numberOfPeople:
          type: integer
          nullable: true
        startTime:
          type: string
          format: date-time
          description: epoch
        endTime:
          type: string
          format: date-time
          description: epoch
        request:
          type: string
          nullable: true
      required: [userId, businessId, name, phoneNumber, startTime, endTime]

    # Discounts
    Discount:
      type: object
      properties:
        id:
          type: string
          format: uuid
        businessId:
          type: string
          format: uuid
        productOrOrderId:
          type: string
          format: uuid
          nullable: true
        startDate:
          type: string
          format: date-time
          description: epoch
        endDate:
          type: string
          format: date-time
          description: epoch
          nullable: true
        percentDiscount:
          type: boolean
        amount:
          type: number
          format: decimal
        individualItemDiscount:
          type: boolean
      required:
        [
          id,
          businessId,
          amount,
          percentDiscount,
          individualItemDiscount,
          startDate,
        ]

    DiscountCreate:
      type: object
      properties:
        businessId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date-time
          description: epoch
        endDate:
          type: string
          format: date-time
          description: epoch
        percentDiscount:
          type: boolean
        amount:
          type: number
          format: decimal
        individualItemDiscount:
          type: boolean
      required: [businessId, amount, individualItemDiscount, percentDiscount]

    # Tax rates
    TaxRate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        value:
          type: number
          format: decimal
        effectiveFrom:
          type: string
          format: date-time
          description: epoch
        effectiveTo:
          type: string
          format: date-time
          description: epoch
          nullable: true
        country:
          type: string
        region:
          type: string
          nullable: true
      required: [id, value, effectiveFrom, country]

    TaxRateCreate:
      type: object
      properties:
        businessId:
          type: string
          format: uuid
        value:
          type: number
          format: decimal
        effectiveFrom:
          type: string
          format: date-time
          description: epoch
        effectiveTo:
          type: string
          format: date-time
          description: epoch
        country:
          type: string
        region:
          type: string
      required: [businessId, value, effectiveFrom, country]

    Place:
      type: object
      properties:
        id:
          type: string
          format: uuid
        placeNumber:
          type: integer
        type:
          $ref: '#/components/schemas/PlaceType'
      required: [id, placeNumber, type]

    PlaceCreate:
      type: object
      properties:
        businessId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        capacity:
          type: integer
        isActive:
          type: boolean
      required: [businessId, name, capacity]

    PlaceUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        capacity:
          type: integer
        isActive:
          type: boolean


    StatisticsAndHistory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orders:
          type: array
          items:
            type: string
            format: uuid
        orderItems:
          type: array
          items:
            type: string
            format: uuid
        orderPayment:
          type: array
          items:
            type: string
            format: uuid
        products:
          type: array
          items:
            type: string
            format: uuid
        productPrices:
          type: array
          items:
            type: string
            format: uuid
        productVariations:
          type: array
          items:
            type: string
            format: uuid
        discounts:
          type: array
          items:
            type: string
            format: uuid
        reservations:
          type: array
          items:
            type: string
            format: uuid
        tax:
          type: array
          items:
            type: string
            format: uuid
        date:
          type: string
          format: date-time
          description: epoch
        income:
          type: number
          format: decimal
      required:
        [
          id,
          orders,
          orderItems,
          orderPayment,
          products,
          productPrices,
          productVariations,
          discounts,
          reservations,
          tax,
          date,
          income,
        ]

    OrderFullDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        businessId:
          type: string
          format: uuid
        UserId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/OrderStatus'
        specialRequest:
          type: string
          nullable: true
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              quantity:
                type: integer
              product:
                $ref: '#/components/schemas/Product'
              productVariation:
                $ref: '#/components/schemas/ProductVariation'
              price:
                $ref: '#/components/schemas/ProductPrice'
              discount:
                $ref: '#/components/schemas/Discount'
        totalBeforeDiscount:
          type: number
          format: decimal
        totalDiscount:
          type: number
          format: decimal
        totalAfterDiscount:
          type: number
          format: decimal
      required:
        [id, businessId, UserId, dateTime, status, items, totalAfterDiscount]

    ReservationDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        businessId:
          type: string
          format: uuid
        name:
          type: string
        phoneNumber:
          type: string
        userId:
          type: string
          format: uuid
          nullable: true
        business:
          $ref: '#/components/schemas/Business'
        reservationDate:
          type: string
          format: date-time
        #status:
        #  $ref: '#/components/schemas/ReservationStatus'
        request:
          type: string
          nullable: true
      required: [id, businessId, name, phoneNumber, reservationDate]

    StatisticsOverview:
      type: object
      properties:
        businessId:
          type: string
          format: uuid
        totalRevenue:
          type: number
          format: decimal
        totalOrders:
          type: integer
        totalReservations:
          type: integer
        averageOrderValue:
          type: number
          format: decimal
        topWorker:
          type: string
          description: Worker with highest sales or performance
        topProduct:
          type: string
          description: Most frequently ordered product
        generatedAt:
          type: string
          format: date-time
      required: [businessId, totalRevenue, totalOrders, totalReservations, generatedAt]

    StatisticsRecord:
      type: object
      properties:
        date:
          type: string
          format: date-time
        revenue:
          type: number
          format: decimal
        orderCount:
          type: integer
        reservationCount:
          type: integer
        averageOrderValue:
          type: number
          format: decimal
      required: [date, revenue, orderCount]


    # Enums & common
    PaymentType:
      type: string
      enum: [Cash, Card, GiftCard]
    OrderStatus:
      type: string
      enum: [InProgress, Canceled, Paid, Refunded]

    UserStatus:
      type: string
      enum: [active, terminate]

    ProductStatus:
      type: string
      enum: [Available, Unavailable, Removed]

    PlaceType:
      type: string
      enum: [Table, Seat, Room]

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required: [code, message]
